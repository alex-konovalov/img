#!/bin/sh
tail -n +4 $0 | pargap -r -q > log.$$ 2>&1
exit
################################################################
# Compute images, in parameter space, of Misiurewicz points,
# or of matings of Misiurewicz polynomials with rabbit/corabbit/airplane
#
mindenom := 8; # minimal denominator; all i/mindenom will be computed
maxdenom := 2^14; # maximal denominator
mindist := 1/10; # subdivide as long as denominator is small enough and
                 # distance between neighbouring points is >mindist
type := "airplane";

maxpcset := 16; # maximal number of post-critical points
################################################################

#ParReset();
ParEval("LoadPackage(\"fr\")");
#ParEval("SetInfoLevel(InfoFR,2)");
ParEval("EPS@fr.maxratio := MacFloat(16/10)");

################################################################
ParInstallTOPCGlobalFunction("makemeone", function(mindenom,maxdenom,mindist,maxpcset,type)
    local points, i, j, idle, c2i, i2c, obstructed, task, angle2, job;
    
    c2i := function(c)
        if IsInt(c) then return c; fi;
        return [Int(10^10*RealPart(c)),Int(10^10*ImaginaryPart(c))];
    end;
    i2c := function(i)
        if IsInt(i) then return i; fi;
        return Complex(i[1]/10^10,i[2]/10^10);
    end;
    MakeReadWriteGlobal("ErrorInner");
    ErrorInner := function(arg) JUMP_TO_CATCH(arg{[2..Length(arg)]}); end;
    if type="mandelbrot" then
	task := function(angle)
            local v;
            v := CALL_WITH_CATCH(RationalFunction,[PolynomialIMGMachine(2,[angle],false)]:param_unicritical);
	    if not v[1] then # gap error
		return 1;
	    elif IsRationalFunction(v[2]) then # z^2+c
		return c2i(Value(v[2],0));
	    elif IsRecord(v[2]) then # obstruction
		return 0;
	    else # fr error
		return 1;
	    fi;
	end;
    else # points in slice v3
        if type="rabbit" then
            angle2 := 1/7;
        elif type="airplane" then
            angle2 := 3/7;
        elif type="corabbit" then
            angle2 := 5/7;
        fi;
        obstructed := [1-angle2-1/7,1-angle2];
        task := function(angle)
            local v;
	    if angle >= obstructed[1] and angle <= obstructed[2] then
		return 0; # we know it's an obstruction
	    fi;
            v := CALL_WITH_CATCH(RationalFunction,[Mating(PolynomialIMGMachine(2,[angle],false),PolynomialIMGMachine(2,[angle2]))]:param_v:=3,runtime:=Runtime()+3600*1000);
	    Info(InfoFR,1,"Spider converged to ",v," on ",MPI_Comm_rank());
            if not v[1] then
                return 1; # gap error
            elif IsRationalFunction(v[2]) then # 1 - (1+a)z^-1 + az^-2
                return c2i(CoefficientsOfUnivariateLaurentPolynomial(v[2])[1][1]);
            elif IsRecord(v[2]) then
		return 0; # obstruction
	    else
                return 1; # fr error
            fi;
        end;
    fi;

    points := [];

    job := [];
    # classical job
    for i in Combinations([0..maxpcset],2) do
	j := 2^i[2]-2^i[1];
	Append(job,[0..j-1]/j);
    od;
    j := AsSortedList(job);
    job := [];
    for i in [1..Length(j)] do
	if i=1 or j[i]<>j[i-1] then
	    Add(job,j[i]);
	fi;
    od;

    # Hamal Hubbard's question: only points in [2/7,1/3]
    if true then
	job := Filtered(job,angle->IsEvenInt(DenominatorRat(angle)) and angle >= 2/7 and angle <= 1/3);
job := [
#  10847/32764, 1801/5440, 10679/32256, 18985/57344, 21655/65408, 21695/65528, 4339/13104, 
#  10853/32768, 21685/65472, 7237/21844, 10851/32752, 4327/13056, 20369/61440, 10861/32760, 
#  21685/65408, 10865/32768, 21725/65504, 21733/65528, 10783/32512, 7217/21760, 21715/65472, 
#  21057/63488, 4755/14336, 21653/65280, 10869/32768, 7239/21824, 19021/57344, 9511/28672, 
#  21697/65408, 21729/65504, 21737/65528, 21739/65534, 2675/8064, 20381/61440, 10785/32512, 
#  4331/13056, 5435/16384, 21719/65472, 69/208, 21739/65532, 21061/63488, 10849/32704, 
  19023/57344, 10865/32752, 10869/32764, 21401/64512, 3397/10240, 21571/65024, 2707/8160, 
  905/2728, 209/630, 8153/24576, 10531/31744, 21699/65408, 21731/65504, 21739/65528, 21741/65534, 
  1189/3584, 5393/16256, 20383/61440, 7219/21760, 10871/32768, 21721/65472, 21737/65520, 
  7247/21844, 21063/63488, 775/2336, 5433/16376, 5435/16382, 16307/49152, 21403/64512, 
  19025/57344, 21573/65024, 637/1920, 10861/32736, 3623/10920, 10871/32766, 21701/65408, 
  2633/7936, 21733/65504, 21741/65528, 21743/65534, 5351/16128, 10787/32512, 21659/65280, 
  1359/4096, 7241/21824, 21739/65520, 21743/65532, 10851/32704, 21065/63488, 10867/32752, 
  10871/32764, 7135/21504, 21575/65024, 361/1088, 10193/30720, 19027/57344, 5431/16368, 
  1087/3276, 16309/49152, 21703/65408, 10533/31744, 945/2848, 21743/65528, 21745/65534, 
  1529/4608, 2697/8128, 21661/65280, 10873/32768, 20387/61440, 1975/5952, 4757/14336, 7247/21840, 
  21745/65532, 2713/8176, 21067/63488, 2717/8188, 8155/24576, 21407/64512, 21577/65024, 
  10831/32640, 1699/5120, 3621/10912, 1553/4680, 10873/32766, 19029/57344, 21705/65408, 
  5267/15872, 21737/65504, 21745/65528, 21747/65534, 223/672, 10789/32512, 7221/21760, 
  5437/16384, 21727/65472, 20389/61440, 21743/65520, 7249/21844, 10853/32704, 9515/28672, 
  10869/32752, 21069/63488, 10873/32764, 21409/64512, 21579/65024, 677/2040, 679/2046, 2039/6144, 
  3101/9344, 21739/65504, 21747/65528, 3107/9362, 10535/31744, 19031/57344, 10705/32256, 
  5395/16256, 4333/13056, 10875/32768, 7243/21824, 4349/13104, 21749/65532, 6797/20480, 
  5427/16352, 5435/16376, 5437/16382, 16313/49152, 21071/63488, 2379/7168, 21581/65024, 
  3611/10880, 10865/32736, 10873/32760, 3625/10922, 2549/7680, 21709/65408, 21741/65504, 
  21749/65528, 21751/65534, 1317/3968, 5353/16128, 10791/32512, 21667/65280, 2719/8192, 701/2112, 
  7249/21840, 21751/65532, 10855/32704, 20393/61440, 10871/32752, 10875/32764, 21073/63488, 
  3059/9216, 21583/65024, 5417/16320, 9517/28672, 1811/5456, 5437/16380, 16315/49152, 
  21711/65408, 3399/10240, 21743/65504, 21751/65528, 21753/65534, 10537/31744, 3569/10752, 
  1349/4064, 7223/21760, 10877/32768, 21733/65472, 19035/57344, 239/720, 7251/21844, 1357/4088, 
  1359/4094, 4079/12288, 21075/63488, 21415/64512, 21585/65024, 2167/6528, 10867/32736, 725/2184, 
  10877/32766, 4759/14336, 21713/65408, 21745/65504, 21753/65528, 21755/65534, 5099/15360, 
  5269/15872, 2677/8064, 10793/32512, 21671/65280, 5439/16384, 7245/21824, 21751/65520, 
  21755/65532, 1551/4672, 19037/57344, 10873/32752, 10877/32764, 6799/20480, 21077/63488, 
  7139/21504, 21587/65024, 903/2720, 247/744, 2719/8190, 8159/24576, 21715/65408, 21747/65504, 
  21755/65528, 21757/65534, 9519/28672, 10199/30720, 10539/31744, 10709/32256, 5397/16256, 
  21673/65280, 10879/32768, 21737/65472, 2417/7280, 21757/65532, 5429/16352, 5437/16376, 
  5439/16382, 16319/49152, 19039/57344, 20399/61440, 21079/63488, 21419/64512, 21589/65024, 
  10837/32640, 3623/10912, 10877/32760, 253/762, 21717/65408, 21749/65504, 21757/65528, 
  21759/65534, 85/256, 21739/65472, 4351/13104, 7253/21844, 10859/32704, 10875/32752, 
  10879/32764, 5419/16320, 21591/65024, 21421/64512, 21081/63488, 20401/61440, 19041/57344, 
  5435/16368, 259/780, 16321/49152, 21719/65408, 21751/65504, 21759/65528, 21761/65534, 
  10881/32768, 21677/65280, 2699/8128, 10711/32256, 10541/31744, 10201/30720, 7247/21824, 
  9521/28672, 21757/65520, 21761/65532, 2715/8176, 2719/8188, 8161/24576, 3613/10880, 
  21593/65024, 7141/21504, 21083/63488, 6801/20480, 10871/32736, 10879/32760, 3627/10922, 
  19043/57344, 3103/9344, 21753/65504, 21761/65528, 3109/9362, 5441/16384, 21679/65280, 
  10797/32512, 1339/4032, 5271/15872, 21743/65472, 5101/15360, 7253/21840, 21763/65532, 
  10861/32704, 4761/14336, 10877/32752, 10881/32764, 271/816, 21595/65024, 21425/64512, 
  21085/63488, 453/1364, 4081/12288, 21723/65408, 21755/65504, 21763/65528, 21765/65534, 
  19045/57344, 10883/32768, 7227/21760, 5399/16256, 3571/10752, 10543/31744, 21745/65472, 
  21761/65520, 7255/21844, 3401/10240, 5431/16352, 5439/16376, 5441/16382, 16325/49152, 
  9523/28672, 10841/32640, 21597/65024, 3061/9216, 21087/63488, 10873/32736, 93/280, 10883/32766, 
  20407/61440, 21725/65408, 21757/65504, 21765/65528, 21767/65534, 2721/8192, 21683/65280, 
  10799/32512, 5357/16128, 659/1984, 3109/9360, 21767/65532, 10863/32704, 2551/7680, 473/1424, 
  10883/32764, 1807/5440, 21599/65024, 2381/7168, 5437/16368, 21089/63488, 5441/16380, 
  16327/49152, 21727/65408, 6803/20480, 21759/65504, 21767/65528, 21769/65534, 10885/32768, 
  4337/13056, 675/2032, 10715/32256, 21749/65472, 19049/57344, 1451/4368, 10545/31744, 
  21769/65532, 97/292, 2041/6144, 10843/32640, 21601/65024, 21431/64512, 3625/10912, 10883/32760, 
  10885/32766, 21091/63488, 9525/28672, 21729/65408, 21761/65504, 21769/65528, 21771/65534, 
  20411/61440, 5443/16384, 7229/21760, 10801/32512, 893/2688, 21751/65472, 21767/65520, 
  7257/21844, 5273/15872, 10865/32704, 19051/57344, 10881/32752, 10885/32764, 1701/5120, 
  2711/8160, 21603/65024, 21433/64512, 2719/8184, 907/2730, 8165/24576, 21093/63488, 21731/65408, 
  21763/65504, 21771/65528, 21773/65534, 4763/14336, 20413/61440, 10887/32768, 21689/65280, 
  5401/16256, 1531/4608, 7251/21824, 21769/65520, 21773/65532, 10547/31744, 5433/16352, 
  5441/16376, 5443/16382, 16331/49152, 19053/57344, 10207/30720, 723/2176, 21605/65024, 
  7145/21504, 10877/32736, 311/936, 3629/10922, 21095/63488, 21733/65408, 21765/65504, 
  21773/65528, 21775/65534, 1361/4096, 21691/65280, 10803/32512, 5359/16128, 21755/65472, 
  2419/7280, 21775/65532, 2637/7936, 10867/32704, 10883/32752, 10887/32764, 319/960, 21607/65024, 
  19055/57344, 1813/5456, 21437/64512, 5443/16380, 16333/49152, 3105/9344, 21097/63488, 
  21767/65504, 21775/65528, 3111/9362, 10889/32768, 7231/21760, 20417/61440, 2701/8128, 
  21757/65472, 1191/3584, 21773/65520, 7259/21844, 2717/8176, 10549/31744, 2721/8188, 8167/24576, 
  10847/32640, 21609/65024, 3403/10240, 989/2976, 21439/64512, 3629/10920, 10889/32766, 
  19057/57344, 21737/65408, 21099/63488, 21769/65504, 21777/65528, 21779/65534, 5445/16384, 
  4339/13056, 10805/32512, 20419/61440, 7253/21824, 335/1008, 21779/65532, 10869/32704, 
  9529/28672, 10885/32752, 5275/15872, 10889/32764, 113/340, 21611/65024, 1021/3072, 21739/65408, 
  21771/65504, 21779/65528, 21781/65534, 21101/63488, 19059/57344, 10891/32768, 21697/65280, 
  5403/16256, 21761/65472, 1037/3120, 21781/65532, 10721/32256, 6807/20480, 5435/16352, 
  5443/16376, 5445/16382, 16337/49152, 10551/31744, 4765/14336, 10849/32640, 21613/65024, 
  117/352, 10889/32760, 10891/32766, 21443/64512, 10211/30720, 21741/65408, 21773/65504, 
  21781/65528, 21783/65534, 21103/63488, 2723/8192, 7233/21760, 10807/32512, 21763/65472, 
  21779/65520, 7261/21844, 1787/5376, 20423/61440, 1553/4672, 10887/32752, 10891/32764, 
  1319/3968, 1085/3264, 9531/28672, 21615/65024, 5441/16368, 121/364, 16339/49152, 21445/64512, 
  21743/65408, 851/2560, 21775/65504, 21783/65528, 21785/65534, 21105/63488, 10893/32768, 
  21701/65280, 1351/4064, 7255/21824, 19063/57344, 21781/65520, 21785/65532, 10723/32256, 
  1359/4088, 1361/4094, 4085/12288, 10553/31744, 3617/10880, 21617/65024, 10883/32736, 
  10891/32760, 3631/10922, 2383/7168, 21745/65408, 21777/65504, 21785/65528, 21787/65534, 
  10213/30720, 21107/63488, 5447/16384, 21703/65280, 10809/32512, 21767/65472, 7261/21840, 
  21787/65532, 383/1152, 10873/32704, 19065/57344, 10889/32752, 10893/32764, 6809/20480, 
  5277/15872, 2713/8160, 21619/65024, 907/2728, 389/1170, 8171/24576, 21449/64512, 21747/65408, 
  21779/65504, 21787/65528, 21789/65534, 9533/28672, 5107/15360, 21109/63488, 10895/32768, 
  1447/4352, 5405/16256, 1979/5952, 4357/13104, 7263/21844, 3575/10752, 5437/16352, 5445/16376, 
  5447/16382, 16343/49152, 19067/57344, 20429/61440, 10555/31744, 10853/32640, 21621/65024, 
  10885/32736, 3631/10920, 10895/32766, 21451/64512, 3107/9344, 947/2848, 21789/65528, 3113/9362, 
  681/2048, 21707/65280, 10811/32512, 7257/21824, 21787/65520, 21791/65532, 5363/16128, 
  10875/32704, 10891/32752, 10895/32764, 2639/7936, 20431/61440, 1809/5440, 19069/57344, 
  21623/65024, 5443/16368, 419/1260, 16345/49152, 7151/21504, 21751/65408, 21783/65504, 
  21791/65528, 703/2114, 10897/32768, 21113/63488, 1277/3840, 2703/8128, 21773/65472, 9535/28672, 
  2421/7280, 21793/65532, 10727/32256, 2719/8176, 2723/8188, 8173/24576, 10557/31744, 2171/6528, 
  6811/20480, 21625/65024, 3629/10912, 2179/6552, 10897/32766, 19071/57344, 3065/9216, 
  21753/65408, 21785/65504, 21793/65528, 21795/65534, 5449/16384, 21115/63488, 7237/21760, 
  10217/30720, 10813/32512, 21775/65472, 3113/9360, 7265/21844, 149/448, 10893/32752, 
  10897/32764, 1357/4080, 5279/15872, 1361/4092, 21627/65024, 4087/12288, 21755/65408, 
  21457/64512, 21787/65504, 21795/65528, 21797/65534, 19073/57344, 10899/32768, 21713/65280, 
  21117/63488, 7259/21824, 5407/16256, 21793/65520, 21797/65532, 1703/5120, 777/2336, 
  10729/32256, 5447/16376, 5449/16382, 16349/49152, 9537/28672, 3619/10880, 10559/31744, 
  10889/32736, 21629/65024, 10897/32760, 3633/10922, 20437/61440, 21757/65408, 7153/21504, 
  21789/65504, 21797/65528, 21799/65534, 2725/8192, 4343/13056, 21119/63488, 21779/65472, 
  10815/32512, 1453/4368, 21799/65532, 10219/30720, 10879/32704, 5365/16128, 10895/32752, 
  10899/32764, 4769/14336, 5429/16320, 165/496, 5449/16380, 21631/65024, 16351/49152, 
  21759/65408, 6813/20480, 21791/65504, 21461/64512, 21799/65528, 21801/65534, 10901/32768, 
  7239/21760, 19077/57344, 21781/65472, 21121/63488, 21797/65520, 169/508, 511/1536, 10859/32640, 
  10891/32736, 173/520, 10901/32766, 21633/65024, 10561/31744, 9539/28672, 21761/65408, 
  21793/65504, 21801/65528, 21803/65534, 21463/64512, 20441/61440, 5451/16384, 21719/65280, 
  7261/21824, 21799/65520, 21803/65532, 10817/32512, 21123/63488, 19079/57344, 10881/32704, 
  10897/32752, 10901/32764, 2683/8064, 3407/10240, 181/544, 2723/8184, 545/1638, 8177/24576, 
  21635/65024, 5281/15872, 3109/9344, 21795/65504, 21803/65528, 3115/9362, 2385/7168, 
  20443/61440, 10903/32768, 21721/65280, 21785/65472, 559/1680, 21805/65532, 5409/16256, 
  21125/63488, 5441/16352, 5449/16376, 5451/16382, 16355/49152, 10733/32256, 19081/57344, 
  5111/15360, 10861/32640, 3631/10912, 10901/32760, 10903/32766, 21637/65024, 10563/31744, 
  21765/65408, 21797/65504, 21805/65528, 21807/65534, 21467/64512, 1363/4096, 7241/21760, 
  21787/65472, 21803/65520, 7269/21844, 10819/32512, 21127/63488, 10883/32704, 10899/32752, 
  10903/32764, 1789/5376, 10223/30720, 19083/57344, 5431/16320, 5447/16368, 1817/5460, 
  16357/49152, 21639/65024, 2641/7936, 21767/65408, 21799/65504, 21807/65528, 21809/65534, 
  3067/9216, 10905/32768, 20447/61440, 4345/13056, 4771/14336, 7263/21824, 623/1872, 21809/65532, 
  2705/8128, 21129/63488, 2721/8176, 2725/8188, 8179/24576, 10735/32256, 213/640, 10895/32736, 
  10903/32760, 3635/10922, 21641/65024, 19085/57344, 21769/65408, 10565/31744, 21801/65504, 
  21809/65528, 21811/65534, 7157/21504, 5453/16384, 21727/65280, 20449/61440, 1981/5952, 
  2423/7280, 21811/65532, 10821/32512, 9543/28672, 1555/4672, 21131/63488, 10901/32752, 
  10905/32764, 671/2016, 679/2040, 227/682, 2045/6144, 21643/65024, 21771/65408, 21803/65504, 
  21811/65528, 21813/65534, 5283/15872, 19087/57344, 21473/64512, 10907/32768, 7243/21760, 
  703/2112, 21809/65520, 7271/21844, 6817/20480, 5411/16256, 5443/16352, 237/712, 5453/16382, 
  16361/49152, 21133/63488, 1193/3584, 2173/6528, 10897/32736, 727/2184, 10907/32766, 
  21645/65024, 5113/15360, 21773/65408, 245/736, 21813/65528, 21815/65534, 10567/31744, 
  21475/64512, 2727/8192, 21731/65280, 7265/21824, 21811/65520, 21815/65532, 10823/32512, 
  20453/61440, 10887/32704, 10903/32752, 10907/32764, 21135/63488, 767/2304, 9545/28672, 
  1811/5440, 5449/16368, 779/2340, 16363/49152, 21647/65024, 3409/10240, 21775/65408, 
  21807/65504, 21815/65528, 21817/65534, 1321/3968, 7159/21504, 10909/32768, 21733/65280, 
  19091/57344, 21797/65472, 7271/21840, 21817/65532, 1353/4064, 1361/4088, 1363/4094, 4091/12288, 
  21137/63488, 10739/32256, 10867/32640, 3633/10912, 839/2520, 10909/32766, 4773/14336, 
  21649/65024, 3111/9344, 21809/65504, 21817/65528, 3117/9362, 2557/7680, 10569/31744, 
  21479/64512, 5455/16384, 1449/4352, 21799/65472, 4363/13104, 7273/21844, 10825/32512, 
  19093/57344, 10889/32704, 10905/32752, 10909/32764, 6819/20480, 21139/63488, 895/2688, 
  2717/8160, 2725/8184, 303/910, 8183/24576, 21651/65024, 21779/65408, 21811/65504, 21819/65528, 
  21821/65534, 9547/28672, 10229/30720, 5285/15872, 21481/64512, 10911/32768, 21737/65280, 
  7267/21824, 21817/65520, 21821/65532, 5413/16256, 5445/16352, 5453/16376, 5455/16382, 
  16367/49152, 19095/57344, 20459/61440, 21141/63488, 10741/32256, 3623/10880, 991/2976, 
  10909/32760, 3637/10922, 21653/65024, 21781/65408, 21813/65504, 21821/65528, 21823/65534, 
  341/1024, 21739/65280, 21803/65472, 1039/3120, 21823/65532, 10827/32512, 10891/32704, 
  10907/32752, 10911/32764, 5371/16128, 21143/63488, 20461/61440, 19097/57344, 1087/3264, 
  1817/5456, 1091/3276, 16369/49152, 21655/65024, 21783/65408, 21815/65504, 21823/65528, 
  21825/65534, 10913/32768, 21485/64512, 2643/7936, 10231/30720, 7247/21760, 9549/28672, 
  21805/65472, 21821/65520, 7275/21844, 2707/8128, 389/1168, 2727/8188, 8185/24576, 3581/10752, 
  21145/63488, 6821/20480, 10871/32640, 10903/32736, 3637/10920, 10913/32766, 19099/57344, 
  21657/65024, 21785/65408, 21817/65504, 21825/65528, 21827/65534, 5457/16384, 21487/64512, 
  10573/31744, 1279/3840, 7269/21824, 21823/65520, 21827/65532, 10829/32512, 4775/14336, 
  10893/32704, 10909/32752, 10913/32764, 1343/4032, 21147/63488, 453/1360, 1363/4092, 4093/12288, 
  21659/65024, 21787/65408, 21819/65504, 21827/65528, 21829/65534, 19101/57344, 10915/32768, 
  7163/21504, 5287/15872, 4349/13056, 21809/65472, 485/1456, 21829/65532, 3411/10240, 5415/16256, 
  5447/16352, 5455/16376, 5457/16382, 16373/49152, 9551/28672, 1535/4608, 21149/63488, 
  10873/32640, 3635/10912, 1559/4680, 10915/32766, 20467/61440, 21661/65024, 21789/65408, 
  21821/65504, 21829/65528, 21831/65534, 2729/8192, 21491/64512, 10575/31744, 7249/21760, 
  21811/65472, 1679/5040, 7277/21844, 5117/15360, 10831/32512, 10895/32704, 10911/32752, 
  10915/32764, 597/1792, 5437/16320, 21151/63488, 5453/16368, 1819/5460, 16375/49152, 
  21663/65024, 6823/20480, 3113/9344, 21823/65504, 21831/65528, 3119/9362, 10917/32768, 
  21493/64512, 19105/57344, 21749/65280, 661/1984, 21829/65520, 21833/65532, 677/2032, 681/2044, 
  2047/6144, 10747/32256, 725/2176, 10907/32736, 2183/6552, 3639/10922, 21153/63488, 9553/28672, 
  21665/65024, 21793/65408, 21825/65504, 21833/65528, 21835/65534, 20471/61440, 5459/16384, 
  7165/21504, 21751/65280, 21815/65472, 7277/21840, 21835/65532, 10577/31744, 19107/57344, 
  10833/32512, 10897/32704, 10913/32752, 10917/32764, 853/2560, 2687/8064, 2719/8160, 909/2728, 
  2729/8190, 8189/24576, 21155/63488, 21667/65024, 21795/65408, 949/2848, 21835/65528, 
  21837/65534, 4777/14336, 20473/61440, 10919/32768, 3071/9216, 7251/21760, 21817/65472, 
  3119/9360, 7279/21844, 5289/15872, 5417/16256, 5449/16352, 5457/16376, 5459/16382, 16379/49152, 
  19109/57344, 10237/30720, 3583/10752, 10877/32640, 10909/32736, 1213/3640, 10919/32766, 
  21157/63488, 21669/65024, 21797/65408, 21829/65504, 21837/65528, 21839/65534, 1365/4096, 
  21499/64512, 4351/13056, 7273/21824, 4367/13104, 21839/65532, 10579/31744, 10835/32512, 
  1557/4672, 10915/32752, 10919/32764, 5119/15360, 19111/57344, 5375/16128, 1813/5440, 
  5455/16368, 5459/16380, 16381/49152, 21159/63488, 21671/65024, 21799/65408, 21831/65504, 
  21839/65528, 21841/65534, 10921/32768, 20477/61440, 2389/7168, 21757/65280, 21821/65472, 
  7279/21840, 21841/65532, 2645/7936, 2709/8128, 2725/8176, 2729/8188, 8191/24576, 3413/10240, 
  10751/32256, 10879/32640, 3637/10912, 10919/32760, 10921/32766, 19113/57344, 21161/63488, 
  21673/65024, 21801/65408, 21833/65504, 21841/65528, 21843/65534, 5461/16384, 20479/61440, 
  21503/64512, 7253/21760, 21823/65472, 21839/65520, 7281/21844, 9557/28672, 10581/31744, 
  10837/32512, 10901/32704, 10917/32752, 10921/32764 ];
    fi;

    # Xavier Buff's question: real polynomials with rabbit
    if false then
    fi;

    MasterSlave(function() # iterator
        local i, new;

	if IsBound(job) then
	    if job=[] then
		return NOTASK;
	    else
		i := Remove(job,1);
		Add(points,[i,fail]);
		return i;
	    fi;
	fi;

        i := Length(points);
        if i=0 then
            Add(points,[0,fail]);
            return 0;
        fi;
        if points[i][1]<1 and IsInt(mindenom*points[i][1]) then
            Add(points,[points[i][1]+1/mindenom,fail]);
            return points[i+1][1];
        fi;
	i := 2; while i <= Length(points) do
            if ForAll(points{[i-1,i]},p->DenominatorRat(p[1])<maxdenom and p[2]<>fail) then # something to subdivide
                if false and IS_COMPLEX(points[i-1][2]) and IS_COMPLEX(points[i][2]) and AbsoluteValue(points[i][2]-points[i-1][2])<mindist then
		    i := i+1;
		    continue;
		fi; # don't waste time here, points are very close
		new := (points[i-1][1]+points[i][1])/2;
                Add(points,[new,fail],i);
                return new; # new task
            fi;
	    i := i+1;
        od;
        return NOTASK; # done
    end,
    task, # task
      function(input,output) # check result, save locally
        points[PositionProperty(points,x->x[1]=input)][2] := i2c(output);
	Info(InfoFR,1,input," gives ",output," ",i2c(output));
        return NO_ACTION;
    end,
      Error); # update data

    return points;
end);

################################################################
points := makemeone(mindenom,maxdenom,mindist,maxpcset,type);

file := Concatenation(type,"-",String(maxpcset));
PrintTo(file,"# gnuplot data -- maxpcset=",maxpcset," type=",type,"\n");
#file := Concatenation(type,"-",String(maxdenom));
#PrintTo(file,"# gnuplot data -- maxdenom=",mindenom," maxdenom=",maxdenom," mindist=",mindist," type=",type,"\n");
lastinfinity := true;
for i in [1..Length(points)] do
    if IsInt(points[i][2]) then
	real := infinity;
	imag := infinity;
	lastinfinity := true;
    else
	if not lastinfinity and AbsoluteValue(points[i-1][2]-points[i][2])>10*mindist then
	    AppendTo(file,"infinity\t0\n"); # a jump in gnuplot
	fi;
	real := RealPart(points[i][2]);
	imag := ImaginaryPart(points[i][2]);
	lastinfinity := false;
    fi;
    AppendTo(file,real,"\t",imag,"\t",String(points[i][1]),"\t",STRING_DIGITS_MACFLOAT(6,MacFloat(points[i][1])),"\n");
od;
# hubbard.g . . . . . . . . . . . . . . . . . . . . . . . . . ends here
# recover angles:
# awk '$1=="master" {n=substr($3,1,length($3)-1); angle[n]=$4; split($4,a,"/"); if(length(a)==1)a[2]=1; angleval[n]=1.0*a[1]/a[2]} $3=="master:" {if(NF==7){printf "%.10g\t%.10g\t%s\t%g\n",substr($5,1,length($5)-1)/10000000000.0,$6/10000000000.0,angle[$1],angleval[$1]}else{print "infinity\tinfinity\t" angle[$1] "\t" angleval[$1]}}' < log.
# awk '{split($3,a,"/");if(a[2]==0)a[2]=1;b=a[1]*16384/a[2];seen[b]++} END{for(i=1;i<=11702;i++) if(seen[i]!=1) print i ",";for(i=14043;i<=16384;i++) if(seen[i]!=1) print i ","}' < rabbit-temp >

if false then

MakeReadWriteGlobal("ErrorInner");
ErrorInner := function(arg) JUMP_TO_CATCH(arg{[2..Length(arg)]}); end;

hard := [8199, 8850, 9349, 9457, 9785, 9800, 10508, 10628, 10822,
  11279, 11308, 11573, 11618, 11690, 14082, 14139, 14211, 14383,
  14457, 14685, 14779, 15085, 15700];

points := [];

for angle in angles2 do
  v := CALL_WITH_CATCH(RationalFunction,[Mating(PolynomialIMGMachine(2,[angle],false),PolynomialIMGMachine(2,[1/7]))]:param_v:=3);
  Info(InfoFR,1,"Angle ",angle,": spider converged to ",v);
  Add(points,[angle,v]);
od;

file := "xx";
PrintTo(file,"");
for i in [1..Length(points)] do
real := STRING_DIGITS_MACFLOAT(10,RealPart(points[i][2]));
imag := STRING_DIGITS_MACFLOAT(10,ImaginaryPart(points[i][2]));
AppendTo(file,real,"\t",imag,"\t",String(points[i][1]),"\t",STRING_DIGITS_MACFLOAT(6,MacFloat(points[i][1])),"\n");
od;

# plot [300:1200] [200:700] '< convert -negate -modulate 200 ~/math/GAP/fr/sandbox/v3.jpg avs:-' binary filetype=avs with rgbimage, '~/math/GAP/fr/sandbox/airplane-4096' using (-($1+7.15)*40+700):(-$2*160+450) with lines
fi;
a2c(x,y) = 2*(x+{0,1}*y)/(x+{0,1}*y+1)

plot [-0.7:3.75] [-1.98:1.98] '< convert -negate -colorspace Gray per3.jpg avs:-' binary filetype=avs origin=(-0.835,-1.995) dx=0.00445 dy=0.00445 with rgbimage,'rabbit-11-16384' using (real(a2c($1,$2))):(imag(a2c($1,$2))) with lines,'airplane-13'  using (real(a2c($1,$2))):(imag(a2c($1,$2))) with lines,'rabbit-11-16384'  using (real(a2c($1,-$2))):(imag(a2c($1,-$2))) with lines
set term pdfcairo size 29.7cm,21cm
set out "wittner.pdf"
replot
set term png size 1112,990
set out "wittner.png"
replot
plot [0.43:1.9] [0.5:1.98] '< convert -negate -colorspace Gray per3.jpg avs:-' binary filetype=avs origin=(-0.835,-1.995) dx=0.00445 dy=0.00445 with rgbimage,'rabbit-11-16384' using (real(a2c($1,$2))):($4 > 0.33333 && $4 < 0.666666 ? imag(a2c($1,$2)):1/0):(150+($4-0.333333)*150*3) with lines linew 2.0 palette,'airplane-13'  using (real(a2c($1,$2))):($4 > 0.142857 && $4 < 0.285715 ? imag(a2c($1,$2)):1/0):(30+($4-0.142857)*120*7) with lines linew 2.0 palette
